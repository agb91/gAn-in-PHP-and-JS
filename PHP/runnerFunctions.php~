<?php

/*
 * in this php file all the functions used in:
 * - runner.php
 */

//include 'editConfigFunctionsCommons.php';
//include 'PHP/editgAnBranchFunctionsCommons.php';
//include 'genericFunctions.php';


function getRunToPrint( $cardinality , $textFromTextMode, $whichRunFirst , $whichRunSecond)
{
	$ris = substr( $whichRunFirst , 0, -1 ); // default.. I don't wanna the semicolon
	if( $cardinality == "textual" )
	{
		$ris = $textFromTextMode;
	}
	if( $cardinality == "multipleRange" )
	{
		$ris = $ris . "-" . $whichRunSecond;
	}
	return $ris;

}

//in which situation are we?
function getCardinality($textMode , $whichRunFirst , $whichRunSecond)
{
    $cardinality = "";

	
	if( strlen( $whichRunSecond ) > 1 )
	{ 
		$cardinality = "multipleRange";
		//echo $cardinality;
	}
	else
	{
		if( strlen( $whichRunFirst ) > 6 )
		{ 
			$cardinality = "multipleSpread";
			//echo $cardinality;
		}
		else
		{
			$cardinality = "single";
			//echo $cardinality;
		}

	}
    if( $textMode == "on" )
    {
        $cardinality = "textual";
    }
	echo "<span hidden id='cardinality'>".$cardinality."</span>";
	return $cardinality;
}

/*
 * Print the blocks that contain the results in an ordered way
 */
function printBlocks( $blocks )
{
    for ( $i = 0 ; $i < ( count( $blocks ) ) ; $i++ ) 
    // does block 0 contain interesting information? ask to Germano,
    // at the moment I skip them. The last block is related to 
    // error messages.   
    {
        echo "<br><br>";
        printSingleBlock( $blocks[ $i ] );
    }
}

/*
 *   print a single block in an organized way
 */
function printSingleBlock( $thisBlock )
{
    $allRows = explode("<br>", $thisBlock);
    //echo "rows are: " . count( $allRows );
    
    // the 0 and the last are empty
    // the 1 is the title of the block, need a different treatment
    writeTitleRow( $allRows[ 1 ] );
    for ( $i = 2 ; $i < ( count( $allRows ) - 1 ) ; $i++ ) 
    {
        printSingleRow( $allRows[ $i ] );
        //echo $i . " " . $allRows[ $i ] ."<br>";
    }
    //echo $thisBlock;
}

/*
 * Check if the row is simple or complex (with an equal or an arrow)
 */
function printSingleRow( $thisRow )
{
    if ( strpos( strtoupper( $thisRow ) , 'WARNING') !== false)//warning are a special case
    {
	    writeWarning( $thisRow );
    }
    else
    {
	if ( strpos( strtoupper( $thisRow ) , 'LOADING') == false )
	{
	    //echo "|" . $thisRow . "-" . strlen($thisRow) . "|";
	    $delimiters = array("=", 
		"-->", "->");
	    $modifiedRow = str_replace( $delimiters, "&&&", $thisRow );
	    //now i split the strig using &&& as delimiter
	    $rowPieces = explode("&&&", $modifiedRow);
	    $dim = count( $rowPieces );
	    if( $dim === 2)
	    {
		writeComplexRow( $rowPieces );
	    } 
	    else
	    {
		writeSimpleRow( $thisRow );
	    }
	}
    }
}

function writeLoading( $thisRow )
{
	echo "";// for the moment why print them?
}

function writeWarning( $thisRow )
{
    echo "<br><span class='warning'>" . $thisRow . "</span>";
}

function writeTitleRow( $row )
{
    if ( strlen( $row ) > 2)
    {
        echo "<h2>" . $row . "</h2>";
    }
}

function writeSimpleRow( $row )
{
    // this is only provisional... but for the shift of today it will be useful
    if ( strpos( $row, 'SORRY') !== false ) 
    {
        //echo "<br><span class = 'noticeIt' >" . $row . "</span>";
        echo "<br><span class = '' >" . $row . "</span>";
    }
    else
    {
        //echo "<br><span class = 'singleRow' >" . $row . "</span>"; 
        echo "<br><span class = '' >" . $row . "</span>"; 
    }    
}

function writeComplexRow( $row )
{
    // this is only provisional... but for the shift of today it will be useful
    if ( strpos( $row[0], 'Slope') !== false ) 
    {
        echo "<br><span class = 'noticeIt' >" . $row[ 0 ] . "  =  " . $row[ 1 ] . "</span>";
    }
    else
    {
        echo "<br><span class = 'leftEqual' >" . $row[ 0 ] . "</span>";
        echo "  -->  ";
        echo $row[ 1 ];  
    }

    //echo "<br><span class = 'leftEqual' >" . $row[ 0 ] . "</span>";
    //echo "  =  ";
    //echo $row[ 1 ];  
}



/*
 * Split the output in blocks (selected by different separators) to 
 * show them easily in the future 
 */
function getBlocks( $text )
{
    $delimiters = array("--------------------------------------", "\\n", 
        "=================================================================================",
        "====================================== oOo ======================================");
    $text = str_replace( $delimiters, "&&&", $text );
    //now i split the strig using &&& as delimiter
    $textPieces = explode("&&&", $text);
    //print_r( $textPieces );
    return $textPieces;
}

function executeBash($command)
{

	$command = cleanString( $command );
	echo $command;	
$output="";
	$descriptorspec = array(
            0 => array("pipe", "r"),  // stdin is a pipe that the child will read from
            1 => array("pipe", "w"),  // stdout is a pipe that the child will write to
            2 => array("pipe", "w")  // stderr is a file to write to
        );
        //proc_open is insicure? yes, but we use an escaper so no problem
        //$process = proc_open ($command , $descriptorspec , $pipes);
        fclose($pipes[0]);
        $output =  "--" ;
        if(!feof($pipes[1])) //in this pipe normal expected output
        {
            $output .= stream_get_contents( $pipes[1]) . "<br>";
        }    
        fclose($pipes[1]);

        if(!feof($pipes[2]))//in this pipe errors in case of crash :(
        {
           $output .= stream_get_contents($pipes[2]) . '<br>';
        }
        fclose($pipes[2]);
        proc_close ( $process );//we have finished
	return $output;
}


/*
 * Run the bash command that starts gAn (external c file that uses root).
 * The function is prepared to read the errors log 
 * The function return the output of the bash.
 * OPTIMIZED FOR SINGLE FOR NOW
 */
function run($wr, $analisys, $gAnPath)
{
    //echo 'path now: '. $gAnPath . ' <br> ';
    
    if ( !is_numeric($wr) )
    {
        echo "inserted run: " . $wr;
        echo "Inserted run is not acceptable";
        $wr = 0;
    }

    if( isAnalysisSafe( $analisys ) == 1 )
    {
        //echo "selected analysis is not acceptable";
        $analisys = "---";
    }

    $output="";
    try 
    {
        //call the rooc data analisys program with the correct arguments by running a bash file
        // escapeshellarg is useful to avoid code injection
        $command = "./gAnShStarter.sh " . escapeshellarg($wr ) . " " . escapeshellarg($analisys) . " " . escapeshellarg($gAnPath);
        
	$output = executeBash($command);

        $pieces = explode("\n", $output);//order the output in rows, not in a unique continuous stream
        $dim = count($pieces);
        $output="";
        for ($i = 0; $i < $dim; $i++) {
            $output .= $pieces[$i] . "<br>";
        }
    }
    catch (Exception $e)//is it necessary? this part of program never crashes ultil today
    {
        echo 'Caught exception: ',  $e->getMessage(), "\n";
        proc_close ( $process );// kill if killable..
        fclose($pipes[0]);
        fclose($pipes[1]);
    }
    return $output;
}




function runRange($wr1, $wr2, $analisys, $gAnPath)
{
    //echo 'path now: '. $gAnPath . ' <br> ';
    
    if ( !is_numeric($wr1) )
    {
        echo "inserted run: " . $wr1;
        echo "Inserted run is not acceptable";
        $wr1 = 0;
    }

    if ( !is_numeric($wr2) )
    {
        echo "inserted run: " . $wr2;
        echo "Inserted run is not acceptable";
        $wr2 = 0;
    }

    if( isAnalysisSafe( $analisys ) == 1 )
    {
        //echo "selected analysis is not acceptable";
        $analisys = "---";
    }

    $output="";
    try 
    {
        //call the rooc data analisys program with the correct arguments by running a bash file
        // escapeshellarg is useful to avoid code injection
        $command = "./gAnShStarterMultiple.sh " . escapeshellarg( $wr1 ) . " ". escapeshellarg( $wr2 ) . " " . escapeshellarg($analisys) . " " . escapeshellarg($gAnPath);
        
	$output = executeBash($command);

        $pieces = explode("\n", $output);//order the output in rows, not in a unique continuous stream
        $dim = count($pieces);
        $output="";
        for ($i = 0; $i < $dim; $i++) {
            $output .= $pieces[$i] . "<br>";
        }
    }
    catch (Exception $e)//is it necessary? this part of program never crashes until today
    {
        echo 'Caught exception: ',  $e->getMessage(), "\n";
        proc_close ( $process );// kill if killable..
        fclose($pipes[0]);
        fclose($pipes[1]);
    }
    return $output;
}


function runRangeSheet($analisys, $gAnPath)
{


    if( isAnalysisSafe( $analisys ) == 1 )
    {
        //echo "selected analysis is not acceptable";
        $analisys = "---";
    }

    $output="";
    try 
    {
        //call the rooc data analisys program with the correct arguments by running a bash file
        // escapeshellarg is useful to avoid code injection
        $command = "./gAnShStarterMultipleSheet.sh " . escapeshellarg($analisys) . " " . escapeshellarg($gAnPath);
        
	$output = executeBash($command);

        $pieces = explode("\n", $output);//order the output in rows, not in a unique continuous stream
        $dim = count($pieces);
        $output="";
        for ($i = 0; $i < $dim; $i++) {
            $output .= $pieces[$i] . "<br>";
        }
    }
    catch (Exception $e)//is it necessary? this part of program never crashes until today
    {
        echo 'Caught exception: ',  $e->getMessage(), "\n";
        proc_close ( $process );// kill if killable..
        fclose($pipes[0]);
        fclose($pipes[1]);
    }
    return $output;
}





/*
 * this function want to find all the existing Root processes: the aim is to
 * be sure of the cleaning of the system after the Root-gAn running. Thi function
 * return the array of the IDs 
 */

function findZombies()//used only on Andrea's pc, just for tests 
{
    $command = "./findZombies.sh ";
    $descriptorspec = array(
        0 => array("pipe", "r"),  // stdin is a pipe that the child will read from
        1 => array("pipe", "w"),  // stdout is a pipe that the child will write to
        2 => array("pipe", "w")  // stderr is a file to write to
    );
    $process = proc_open ($command , $descriptorspec , $pipes);
    fclose($pipes[0]);
    $output =  "" ;
    while(!feof($pipes[1])) 
    {
        $output .= stream_get_contents($pipes[1]) . "<br>";
    }    
    fclose($pipes[1]);
    proc_close ( $process );
    // example:  www-data 25176 0.0 0.0 6616 944 ? S 18:36 0:00 grep gAnShStarted
    // now I split the string to return only the vector of the IDs
    $pieces = explode("\n", $output);
    $dim = count($pieces);
    //$output = $output . " final count:  " . $dim . "   -   ";	
    $result = "";
    $output = "";
    $result = [];
    for ($i = 0; $i < $dim - 1; $i++) // last is empty..
    {
		//$output = $output . "<br>" . $i . " )  " ;//. $pieces[$i] ; 
		//print_r( explode(" ", $pieces[$i]) );
                $added = explode(" ", $pieces[$i])[1];
		//if(count($added)>1)//if the vector isn't empty
		{
		    $output .= $output . $added . ";;;";
                    array_push( $result , $added );
		}
    }
    if($dim < 3)
    {
	$result = [];
	$output = "";
    }
    return $result;
}

function killThis($id)
{
    $id = cleanString($id);
    $id = escapeshellarg( $id );
    echo "killer call on : " . $id;

    $command = "./zombieKiller.sh " . $id;
    $descriptorspec = array(
        0 => array("pipe", "r"),  // stdin is a pipe that the child will read from
        1 => array("pipe", "w"),  // stdout is a pipe that the child will write to
        2 => array("pipe", "w")  // stderr is a file to write to
    );
    $process = proc_open ($command , $descriptorspec , $pipes);
    fclose($pipes[0]);
    $output =  "" ;
    while(!feof($pipes[1])) 
    {
        $output .= stream_get_contents($pipes[1]) . "<br>";
    }    
    fclose($pipes[1]);
    proc_close ( $process );
    echo $output;
}

function killZombies($z)
{
    //echo count( $z );
    for ($i = 0; $i < count( $z ) ; $i++)
    {
	$thisID = $z[$i];
	killThis($thisID);	
    } 
}


?>
